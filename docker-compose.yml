---
name: ezarr

networks:
  arr-net:
    driver: bridge

services:
  sonarr:
    image: lscr.io/linuxserver/sonarr:latest
    container_name: sonarr
    environment:
      - PUID=${SONARR_UID}
      - PGID=${MEDIACENTER_GID}
      - UMASK=002
      - TZ=${TIMEZONE}
    volumes:
      - ${ROOT_DIR}/config/sonarr-config:/config
      - ${ROOT_DIR}/data:/data
    ports:
      - "8989:8989"
    networks:
      - arr-net
    restart: unless-stopped

  radarr:
    image: lscr.io/linuxserver/radarr:latest
    container_name: radarr
    environment:
      - PUID=${RADARR_UID}
      - PGID=${MEDIACENTER_GID}
      - UMASK=002
      - TZ=${TIMEZONE}
    volumes:
      - ${ROOT_DIR}/config/radarr-config:/config
      - ${ROOT_DIR}/data:/data
    ports:
      - "7878:7878"
    networks:
      - arr-net
    restart: unless-stopped

  lidarr:
    image: lscr.io/linuxserver/lidarr:latest
    container_name: lidarr
    environment:
      - PUID=${LIDARR_UID}
      - PGID=${MEDIACENTER_GID}
      - UMASK=002
      - TZ=${TIMEZONE}
    volumes:
      - ${ROOT_DIR}/config/lidarr-config:/config
      - ${ROOT_DIR}/data:/data
    ports:
      - "8686:8686"
    networks:
      - arr-net
    restart: unless-stopped

  # readarr:
  #   image: lscr.io/linuxserver/readarr:develop
  #   container_name: readarr
  #   environment:
  #     - PUID=${READARR_UID}
  #     - PGID=${MEDIACENTER_GID}
  #     - UMASK=002
  #     - TZ=${TIMEZONE}
  #   volumes:
  #     - ${ROOT_DIR}/config/readarr-config:/config
  #     - ${ROOT_DIR}/data:/data
  #   ports:
  #     - "8787:8787"
  #   networks:
  #     - arr-net
  #   restart: unless-stopped

  # audiobookshelf:
  #   image: ghcr.io/advplyr/audiobookshelf:latest
  #   container_name: audiobookshelf
  #   environment:
  #     - user=${AUDIOBOOKSHELF_UID}:${MEDIACENTER_GID}
  #     - TZ=${TIMEZONE}
  #   volumes:
  #     - ${ROOT_DIR}/config/audiobookshelf:/config
  #     - ${ROOT_DIR}/data/media/audiobooks:/audiobooks
  #     - ${ROOT_DIR}/data/media/podcasts:/podcasts
  #     - ${ROOT_DIR}/data/media/audiobookshelf-metadata:/metadata
  #   ports:
  #     - "13378:80"
  #   restart: unless-stopped

  bazarr:
    image: lscr.io/linuxserver/bazarr:latest
    container_name: bazarr
    environment:
      - PUID=${BAZARR_UID}
      - PGID=${MEDIACENTER_GID}
      - TZ=${TIMEZONE}
    volumes:
      - ${ROOT_DIR}/config/bazarr-config:/config
      - ${ROOT_DIR}/data/media:/media
    ports:
      - "6767:6767"
    networks:
      - arr-net
    restart: unless-stopped

  prowlarr:
    image: lscr.io/linuxserver/prowlarr:develop
    container_name: prowlarr
    environment:
      - PUID=${PROWLARR_UID}
      - PGID=${MEDIACENTER_GID}
      - UMASK=002
      - TZ=${TIMEZONE}
    volumes:
      - ${ROOT_DIR}/config/prowlarr-config:/config
    ports:
      - "9696:9696"
    networks:
      - arr-net
    restart: unless-stopped
  
  flaresolverr:
    image: ghcr.io/flaresolverr/flaresolverr:latest
    container_name: flaresolverr
    environment:
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - LOG_HTML=${LOG_HTML:-false}
      - CAPTCHA_SOLVER=${CAPTCHA_SOLVER:-none}
      - TZ=${TIMEZONE}
    ports:
      - "8191:8191"
    networks:
      - arr-net
    restart: unless-stopped

  jellyfin:
    image: lscr.io/linuxserver/jellyfin:latest
    container_name: jellyfin
    environment:
      - PUID=${UID}
      - PGID=${MEDIACENTER_GID}
      - UMASK=002
      - TZ=${TIMEZONE}
    volumes:
      - ${ROOT_DIR}/config/jellyfin-config:/config
      - ${ROOT_DIR}/data/media:/data
    ports:
      - "8096:8096"
    networks:
      - arr-net
    restart: unless-stopped

  jellyseerr:
    image: fallenbagel/jellyseerr:latest
    container_name: jellyseerr
    environment:
      - PUID=${JELLYSEERR_UID}
      - PGID=${MEDIACENTER_GID}
      - UMASK=002
      - TZ=${TIMEZONE}
    volumes:
      - ${ROOT_DIR}/config/jellyseerr-config:/app/config
    ports:
      - "5056:5055"
    networks:
      - arr-net
    restart: unless-stopped

  # https://github.com/CyferShepard/Jellystat
  # https://hub.docker.com/r/cyfershepard/jellystat
  # https://github.com/Wh1rr/ultimate-jellyfin-stack/blob/768b902378ea037c1f76cd3ed60a4a8d75833ca8/docker-compose.yml#L455-L486
  jellystat-db:
    image: postgres:15.2
    container_name: jellystat-db
    shm_size: 1gb
    environment:
      # - POSTGRES_USER=postgres
      # - POSTGRES_PASSWORD=password
      - POSTGRES_USER=${JELLYSTATDB_USER:-postgres}
      - POSTGRES_PASSWORD=${JELLYSTATDB_PW:-password}
      - TZ=${TIMEZONE}
    volumes:
      - ${ROOT_DIR}/config/jellystatdb-config:/var/lib/postgresql/data
    networks:
      - arr-net
    restart: unless-stopped

  jellystat:
    image: cyfershepard/jellystat:latest
    container_name: jellystat
    environment:
      # - POSTGRES_USER=postgres
      # - POSTGRES_PASSWORD=password
      - POSTGRES_USER=${JELLYSTATDB_USER:-postgres}
      - POSTGRES_PASSWORD=${JELLYSTATDB_PW:-password}
      - POSTGRES_IP=jellystat-db
      - POSTGRES_PORT=5432
      - JWT_SECRET=${JWT_SECRET:-'my-secret-jwt-key'}
    volumes:
      - ${ROOT_DIR}/config/jellystat-config:/app/backend/backup-data
    ports:
      - "3000:3000"
    networks:
      - arr-net
    depends_on:
      - jellystat-db
    restart: unless-stopped

  # There are a couple of networking options that I can choose from, each of which have pros and cons
  # 1. arr-net bridge docker networking mode
  #    * this will allow other containers to reference qbittorrent by container name instead of ip address
  #    * I would have to install the VPN on the VM itself, and Im unable to pass the Surfshark network interface into the qBittorrent container, meaning I cant bind qbittorrent to using the interface. Basically I have no fail-safe
  #    * When I have the VPN running, I have issues sshing into the machine sometimes (this may have been bc of the kill switch?)
  # 2. host docker networking mode
  #    * other containers cant reference qbittorrent by name, and would have to use the static ip. That makes this solution less portable
  #    * because I am leeching off the host's network interfaces, I have access to the surfshark network interface and can bind qbittorrent to it
  #      * might still have ssh issues?
  # 3. forwarding a containers network to another container
  #    * this allows me to route only certain containers traffic through a VPN, while also keeping LAN access and name references
  #    * open questions
  #      * if I were to do this, can I also use the arr-net bridge network to maintain name based references?
  #        * can I specify if connections are LAN only? or read only? as in WAN traffic only goes onto one network, but LAN access is allowed on the other network
  #      * if I were to kill the vpn forwarding container, can I guarantee that all internet connectivity would be killed, giving me peace of mind?
  # 4. routing all network traffic at the Hypervisor/VM level to a VPN
  #      * Would probably need to install something like OPNsense or OpenWRT for this, and then setup a wireguard tunnel to one of the VPN providers servers
  #        * Might also need to pass a special network interface from proxmox into this VM
  qbittorrent:
    image: lscr.io/linuxserver/qbittorrent:latest
    container_name: qbittorrent
    environment:
      - PUID=${QBITTORRENT_UID}
      - PGID=${MEDIACENTER_GID}
      - UMASK=002
      - TZ=${TIMEZONE}
      - WEBUI_PORT=8080
      # https://github.com/VueTorrent/VueTorrent/wiki/Installation#using-lsio-docker-mod
      # - DOCKER_MODS=ghcr.io/vuetorrent/vuetorrent-lsio-mod:latest
    volumes:
      - ${ROOT_DIR}/config/qbittorrent-config:/config
      - ${ROOT_DIR}/data/torrents:/data/torrents
    # ports:
    #   - "8080:8080"
    #   - "6881:6881"
    #   - "6881:6881/udp"
    # networks:
    #   - arr-net
    network_mode: "container:wireguard" # route traffic through my vpn container
    depends_on:
      wireguard:
        condition: service_started
    restart: unless-stopped

  sabnzbd:
    image: lscr.io/linuxserver/sabnzbd:latest
    container_name: sabnzbd
    environment:
      - PUID=${SABNZBD_UID}
      - PGID=${MEDIACENTER_GID}
      - UMASK=002
      - TZ=${TIMEZONE}
    volumes:
      - ${ROOT_DIR}/config/sabnzbd-config:/config
      - ${ROOT_DIR}/data/usenet:/data/usenet
    ports:
      - "8081:8080"
    networks:
      - arr-net
    restart: unless-stopped

  # I did in fact require additional help loading in /lib/modules
  # https://docs.linuxserver.io/images/docker-wireguard/
  wireguard:
    image: lscr.io/linuxserver/wireguard:latest
    container_name: wireguard
    cap_add:
      - NET_ADMIN
      - SYS_MODULE # I needed this
    environment:
      - PUID=${QBITTORRENT_UID}
      - PGID=${MEDIACENTER_GID}
      - TZ=${TIMEZONE}
      - DOCKER_MODS=lscr.io/linuxserver/mods:universal-tshoot 

      # Mostly server config
      # - SERVERURL=wireguard.domain.com #optional
      # - SERVERPORT=51820 #optional
      # - PEERS=1 #optional
      # - PEERDNS=auto #optional
      # - INTERNAL_SUBNET=10.13.13.0 #optional
      # - ALLOWEDIPS=0.0.0.0/0 #optional
      # - PERSISTENTKEEPALIVE_PEERS= #optional

      # - LOG_CONFS=true #optional
    volumes:
      - ./wireguard-config:/config
      - /lib/modules:/lib/modules # I needed this
    networks:
      - arr-net
    ports:
      - 51820:51820/udp

      # These got moved here from qBittorrent
      - "8080:8080"
      - "6881:6881"
      - "6881:6881/udp"
    sysctls:
      - net.ipv4.conf.all.src_valid_mark=1
    restart: unless-stopped

  # https://filebrowser.org/installation#docker
  # https://filebrowser.org/cli/filebrowser-config-init
  # default username:password is admin:random_printed_in_logs
  filebrowser:
    image: filebrowser/filebrowser
    container_name: filebrowser
    volumes:
      - ${ROOT_DIR}/data/:/srv

      - ${ROOT_DIR}/config/filebrowser-config:/database
      # - ${ROOT_DIR}/config/filebrowser-config/filebrowser.db:/database/filebrowser.db
      
      # not required. will be autogenerated with sane defaults if it doesn't exist
      # - ${ROOT_DIR}/config/filebrowser-config:/config
    ports:
      - "8085:80"
    networks:
      - arr-net
    restart: unless-stopped
